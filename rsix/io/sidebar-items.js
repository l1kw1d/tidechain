initSidebarItems({"constant":[["ICANON","`ICANON`"],["PIPE_BUF","`PIPE_BUF`—The maximum length at which writes to a pipe are atomic."]],"enum":[["Advice","`POSIX_MADV_*` constants for use with `madvise`."]],"fn":[["close","`close(raw_fd)`—Closes a `RawFd` directly."],["dup","`dup(fd)`—Creates a new `OwnedFd` instance that shares the same underlying file description as `fd`."],["dup2","`dup2(fd, new)`—Creates a new `OwnedFd` instance that shares the same underlying file description as the existing `OwnedFd` instance, closing `new` and reusing its file descriptor."],["dup2_with","`dup3(fd, new, flags)`—Creates a new `OwnedFd` instance that shares the same underlying file description as the existing `OwnedFd` instance, closing `new` and reusing its file descriptor, with flags."],["ioctl_fioclex","`ioctl(fd, FIOCLEX)`—Set the close-on-exec flag."],["ioctl_fionbio","`ioctl(fd, FIONBIO, &value)`—Enables or disables non-blocking mode."],["ioctl_fionread","`ioctl(fd, FIONREAD)`—Returns the number of bytes ready to be read."],["ioctl_tcgets","`ioctl(fd, TCGETS)`—Get terminal attributes."],["ioctl_tiocexcl","`ioctl(fd, TIOCEXCL)`—Enables exclusive mode on a terminal."],["ioctl_tiocgwinsz","`ioctl(fd, TIOCGWINSZ)`—Get the current terminal window size."],["ioctl_tiocnxcl","`ioctl(fd, TIOCNXCL)`—Disables exclusive mode on a terminal."],["is_read_write","Returns a pair of booleans indicating whether the file descriptor is readable and/or writeable, respectively."],["isatty","`isatty(fd)`—Tests whether a file descriptor refers to a terminal."],["madvise","`posix_madvise(addr, len, advice)`—Declares an expected access pattern for a memory-mapped file."],["mlock","`mlock(ptr, len)`—Lock memory into RAM."],["mmap","`mmap(ptr, len, prot, flags, fd, offset)`—Create a file-backed memory mapping."],["mmap_anonymous","`mmap(ptr, len, prot, MAP_ANONYMOUS | flags, -1, 0)`—Create an anonymous memory mapping."],["mprotect","`mprotect(ptr, len, flags)`"],["munlock","`munlock(ptr, len)`—Unlock memory."],["munmap","`munmap(ptr, len)`"],["pipe","`pipe()`—Creates a pipe."],["poll","`poll(self.fds, timeout)`"],["pread","`pread(fd, buf, offset)`—Reads from a file at a given position."],["preadv","`preadv(fd, bufs, offset)`—Reads from a file at a given position into multiple buffers."],["pwrite","`pwrite(fd, bufs)`—Writes to a file at a given position."],["pwritev","`pwritev(fd, bufs, offset)`—Writes to a file at a given position from multiple buffers."],["read","`read(fd, buf)`—Reads from a stream."],["readv","`readv(fd, bufs)`—Reads from a stream into multiple buffers."],["stderr","`STDERR_FILENO`—Standard error, borrowed."],["stdin","`STDIN_FILENO`—Standard input, borrowed."],["stdout","`STDOUT_FILENO`—Standard output, borrowed."],["take_stderr","`STDERR_FILENO`—Standard error, owned."],["take_stdin","`STDIN_FILENO`—Standard input, owned."],["take_stdout","`STDOUT_FILENO`—Standard output, owned."],["ttyname","`ttyname_r(fd)`"],["write","`write(fd, buf)`—Writes to a stream."],["writev","`writev(fd, bufs)`—Writes to a stream from multiple buffers."]],"struct":[["DupFlags","`O_*` constants for use with `dup2`."],["Error","The error type for rsix APIs."],["MapFlags","`MAP_*` flags for use with `mmap`."],["MprotectFlags","`PROT_*` flags for use with `mprotect`."],["OwnedFd","A wrapper around `io_lifetimes::OwnedFd` which closes the file descriptor using rsix’s own `close` rather than libc’s `close`."],["PollFd","`struct pollfd`"],["PollFlags","`POLL*`"],["ProtFlags","`PROT_*` flags for use with `mmap`."]],"type":[["Result","A specialized `Result` type for rsix APIs."],["Termios","`struct termios`, for use with `ioctl_tcgets`."],["Winsize","`struct winsize`"]]});